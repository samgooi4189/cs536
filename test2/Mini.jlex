import java_cup.runtime.*; // defines the Symbol class
import java.util.*;

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
WHITESPACE=    [\040\t]
DIVIDE=		[/]
EQUALS=		[=]
GREATER=	[\>]
LPAREN=		[(]
LESS=		[\<]
MINUS=		[\-]
RPAREN=		[)]
NOT=		[!]
SEMICOLON=	[\;]
AND=		[&]
OR=		[|]
COMMA=		[,]
PLUS=		[\+]
IDINIT=		[a-zA-Z_]
IDBACK=		[a-zA-Z0-9_]
EOF=		[\0]
LCURLY=		[\{]
LSQBRACKET=	[\[]
RCURLY=		[\}]
INTLITERAL=	[0-9]
STAR=		[\*]
RSQBRACKET=	[\]]
GOODSTRINGLITERAL=	[^\n\"\a\b\r\f]
BADSTRINGLITERAL=	[nt'\"\\brf ]

BACKSLASH=	[\\]
DOUBLEQUOTE=    [\"]
NEWLINE=	[\n\r]
EOF=		[\0]

%state WHITESPACE_STATE

// The next 3 lines are included so that we can use the generated scanner
// with java CUP (the Java parser generator)
%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

// Tell JLex what to do on end-of-file
%eofval{
return new Symbol(sym.EOF);
%eofval}

// Turn on line counting
%line

%%

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.
	    int val = 0;
	    if(yytext().length() > Integer.MAX_VALUE){
	    	Errors.fatal(yyline+1, CharNum.num,
                         "integer literal too large; using max value");
	    	val = Integer.MAX_VALUE;
	    }
	    else{
            	val = (new Integer(yytext())).intValue();
	    }
            Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num+=yytext().length();
            return S;
          }

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"+"       { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }
        
{DIVIDE}	{ Symbol s = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{COMMA}		{ Symbol s = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{MINUS}		{ Symbol s = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{LPAREN}	{ Symbol s = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{RPAREN}	{ Symbol s = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{GREATER}	{ Symbol s = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{LESS}		{ Symbol s = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{STAR}		{ Symbol s = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{GREATER}{EQUALS}	{ Symbol s = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=2;
		  return s;
		}
{LESS}{EQUALS}		{ Symbol s = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=2;
		  return s;
		}

{EQUALS}  { Symbol s = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{EQUALS}{EQUALS}  { Symbol s = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{DOUBLEQUOTE}({GOODSTRINGLITERAL}|{BACKSLASH}({BADSTRINGLITERAL}|("a'"|"a\"")))*{DOUBLEQUOTE} { Symbol s = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
		  CharNum.num+=yytext().length();
		  return s;
		}
{DOUBLEQUOTE}({GOODSTRINGLITERAL}|{BACKSLASH}({BADSTRINGLITERAL}|("a'"|"a\"")))*({NEWLINE}|NULL) { 
		  CharNum.num=1;
		  Errors.fatal(yyline+1, CharNum.num,
                         "ignoring unterminated string literal");
		}
{DOUBLEQUOTE}{GOODSTRINGLITERAL}*({BACKSLASH}{BADSTRINGLITERAL})+{GOODSTRINGLITERAL}* { 
		  CharNum.num=1;
		  Errors.fatal(yyline+1, CharNum.num,
                         "ignoring unterminated string literal with bad escaped character");
		}
{DOUBLEQUOTE}({BACKSLASH}{GOODSTRINGLITERAL})*{DOUBLEQUOTE} { 
		  CharNum.num=1;
		  Errors.fatal(yyline+1, CharNum.num,
                         "ignoring string literal with bad escaped character");
		}
{SEMICOLON}	{ Symbol s = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{LCURLY}	{ Symbol s = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
{RCURLY}	{ Symbol s = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num++;
		  return s;
		}
"false"		{ Symbol s = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=5;
		  return s;
		}
"int"{WHITESPACE}+		{ Symbol s = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=3;
		  return s;
		}
"write"{WHITESPACE}+		{ Symbol s = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=5;
		  return s;
		}
"bool"{WHITESPACE}+		{ Symbol s = new Symbol(sym.BOOL, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=4;
		  return s;
		}
"if"{WHITESPACE}+		{ Symbol s = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=2;
		  return s;
		}
"return"{WHITESPACE}+	{ Symbol s = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=6;
		  return s;
		}
"true"		{ Symbol s = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=4;
		  return s;
		}	
"cin"{WHITESPACE}+		{ Symbol s = new Symbol(sym.CIN, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=3;
		  return s;
		}
"void"{WHITESPACE}+		{ Symbol s = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=4;
		  return s;
		}
"else"		{ Symbol s = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=4;
		  return s;
		}
"cout"		{ Symbol s = new Symbol(sym.COUT, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=4;
		  return s;
		}
"read"		{ Symbol s = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=4;
		  return s;
		}
"while"		{ Symbol s = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=5;
		  return s;
		}
{OR}{OR}	{ Symbol s = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=2;
		  return s;
		}
{AND}{AND}	{ Symbol s = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
		  CharNum.num+=2;
		  return s;
		}
{IDINIT}{IDBACK}*	{ Symbol s = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
		  	CharNum.num+=yytext().length();
		  	return s;
			}
("//"|"#")(.)*	{Errors.fatal(yyline+1, CharNum.num,
                         "Comment ");
            	CharNum.num++;
		}

.         { Errors.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }




